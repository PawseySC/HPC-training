#include <math.h>
#include <cstring>

#define FLOAT float
#define TILE_SIZE 16
#define SOFTENING 1e-20
#define INVSQRT 1.f/sqrtf
//#define INVSQRT inv_sqrt

#define ONE 1.f

inline
double
inv_sqrt(double ix)
{
        double w = ix*0.5;
        double x = ix;
        x = 1.f/sqrtf((float) x);
        x = x*(1.5 - w*x*x);
        //x = x*(1.5 - w*x*x);
        return x;
}


typedef struct
{
        FLOAT* __restrict__ x;
        FLOAT* __restrict__ y;
        FLOAT* __restrict__ z;
        FLOAT* __restrict__ vx;
        FLOAT* __restrict__ vy;
        FLOAT* __restrict__ vz;
} Body;

// the main routine
void bodyForce(Body *p, FLOAT const dt, int n)
{
#pragma omp parallel for schedule(guided)
        for (int i = 0; i < n; i++)
        {
                FLOAT Fx = 0.;
                FLOAT Fy = 0.;
                FLOAT Fz = 0.;
                //
                #pragma simd
                #pragma unroll GCC(16)
                for (int j = 0; j < n; j++)
                {
                        const FLOAT dx = p->x[j] - p->x[i]; // 1 flop 2 loads
                        const FLOAT dy = p->y[j] - p->y[i]; // 1 flop 2 loads
                        const FLOAT dz = p->z[j] - p->z[i]; // 1 flop 2 loads
                        //
                        const FLOAT dist        = dx*dx + dy*dy + dz*dz + (FLOAT) SOFTENING; // 6 flops
                        const FLOAT invSqrtDist = ONE/SQRT(dist);                     // 2 fLops (?)
                        //
                        const FLOAT invDist3 = invSqrtDist*invSqrtDist*invSqrtDist;  // 3 flops
                        //
                        Fx += dx*invDist3; // 2 fLops
                        Fy += dy*invDist3; // 2 flops
                        Fz += dz*invDist3; // 2 flops
                }  // 20 flops,
                //
                p->vx[i] += dt*Fx; // 2 flops
                p->vy[i] += dt*Fy; // 2 flops
                p->vz[i] += dt*Fz; // 2 flops
         }
}
